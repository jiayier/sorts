#include <stdio.h>
#include  <string.h>
#include <stdlib.h>

/* run this program using the console pauser or add your own getch, system("pause") or input loop */




#include <stdio.h>
#include <stdlib.h> 



typedef struct data{
    int elem;
    int key;


}data;


void swap(int *x,int *y)
{
   int temp;
   temp = *x;
   *x = *y;
   *y = temp;
}

int choose_pivot(int i,int j )
{
   return((i+j) /2);
}

void quicksort(int list[],int m,int n)
{
   int key,i,j,k;
   if( m < n)
   {
      k = choose_pivot(m,n);
      swap(&list[m],&list[k]);
      key = list[m];
      i = m+1;
      j = n;
      while(i <= j)
      {
         while((i <= n) && (list[i] <= key))
                i++;
         while((j >= m) && (list[j] > key))
                j--;
         if( i < j)
                swap(&list[i],&list[j]);
      }
     // 交换两个元素的位置
      swap(&list[m],&list[j]);
     // 递归地对较小的数据序列进行排序
      quicksort(list,m,j-1);
      quicksort(list,j+1,n);
   }
}

void printlist(int list[],int n)
{
   int i;
   for(i=0;i<n;i++)
      printf("%d\t",list[i]);
}




void printList1(data list[],int n){
	
	
	 int i;
   for(i=0;i<n;i++)
      printf("%d\t",list[i].key);
	
	
}

//插入法排序,空出首位 

void insertSort(data list[],int m){
	int i,j;
	for (i=2;i<m;i++){
	//	printf("=====>%d\n",i);
		list[0] = list[i];
		j=i-1;
		while(list[0].key<list[j].key){
			list[j+1]=list[j];
			j--;
		}
		list[j+1]=list[0];	
		
		
			printf("\nssssssssssssssssssssssss\n");
		    printList1(list,m);
		    printf("\nssssssssssssssssssssssss\n");
	}	
} 




void main()
{
   const int MAX_ELEMENTS = 4;
   int list[MAX_ELEMENTS];
   int i = 0;
   data list1[MAX_ELEMENTS];
   // 产生填充序列的随机数
   for(i = 0; i < MAX_ELEMENTS; i++ ){
     list[i] = rand();
     list1[i+1].key= rand();
   //  list1[i].elem = rand();

   }
  // printf("\n进行排序之前的序列:\n");
  // printlist(list,MAX_ELEMENTS);
   printf("\n进行排序之前的序列1:\n");

    printList1(list1,MAX_ELEMENTS);
   // sort the list using quicksort
 //   quicksort(list,0,MAX_ELEMENTS-1);
	insertSort(list1,MAX_ELEMENTS);
   // print the result
   // printf("\n使用快速排序算法进行排序之后的序列:\n");
   // printlist(list,MAX_ELEMENTS);
    printf("\n使用快速排序算法进行排序之后的序列1:\n");
    printList1(list1,MAX_ELEMENTS);

}





//
//
//
//
//int main(int argc, char *argv[]) {
//	int arr[8] ={1,99,66,39,99,87,621,665};  
//	int i,j,m,length;
//	
//	
//	
// //   length = strlen(arr);
//    
//    length=sizeof(arr)/sizeof(arr[0]);  
//    
//    printf("%d",length);
//	for(i=0;i<length;i++){	
//	    m = arr[i];
//	    
//	    for(j=0;j<length;j++){
//	    	
//	    	if(m<arr[j]){
//	    	 arr[i]=arr[j];
//	    	 m=arr[j];
//			}
//	    	
//		}
//	}
//	
//	
//	
//	for (i=0;i<length;i++){
//		
//		printf("%d\n",arr[i]);
//	}
//	
//	
//	
//	
//	
//	return 0;
//}